{"ast":null,"code":"var _jsxFileName = \"/Users/sara/Desktop/SAT Chatbot/LLM-Empowered-SAT-Bot-Frontend/src/Chatbot.js\",\n  _s = $RefreshSig$();\n// import React, { useState, useRef, useEffect } from \"react\";\n// import { FiSend } from \"react-icons/fi\";\n// import { AiOutlineClose } from \"react-icons/ai\";\n// import { TbMessageChatbotFilled } from \"react-icons/tb\";\n// import axios from 'axios';\n\n// const Chatbot = () => {\n//     const [messages, setMessages] = useState([\n//         { text: \"سلام! چطور میتونم کمکتون کنم؟\", sender: \"bot\" }\n//     ]);\n//     const [input, setInput] = useState(\"\");\n//     const [isTyping, setIsTyping] = useState(false);\n\n//     const chatAreaRef = useRef(null);\n\n//     // const sendMessage = () => {\n//     //     if (input.trim() !== \"\") {\n//     //         setMessages([...messages, { text: input, sender: \"user\" }]);\n//     //         setInput(\"\");\n\n//     //         // Show placeholder dots for the bot's response\n//     //         setMessages((prevMessages) => [\n//     //             ...prevMessages,\n//     //             { text: \"...\", sender: \"bot-placeholder\" },\n//     //         ]);\n\n//     //         setIsTyping(true);\n\n//     //         // Simulate bot's response after 2 seconds\n//     //         setTimeout(() => {\n//     //             setIsTyping(false);\n//     //             setMessages((prevMessages) =>\n//     //                 prevMessages.map((message, index) =>\n//     //                     index === prevMessages.length - 1 && message.sender === \"bot-placeholder\"\n//     //                         ? { text: \"ممنونم از پیامتون!\", sender: \"bot\" }\n//     //                         : message\n//     //                 )\n//     //             );\n//     //         }, 2000);\n\n//     //         setTimeout(() => {\n//     //             if (chatAreaRef.current) {\n//     //                 chatAreaRef.current.scrollTop = chatAreaRef.current.scrollHeight;\n//     //             }\n//     //         }, 100);\n//     //     }\n//     // };\n\n//     const sendMessage = async () => {\n//         if (!input.trim()) return;\n\n//         // Add the user's message to the chat\n//         const userMessage = { text: input, sender: 'user' };\n//         setMessages((prevMessages) => [...prevMessages, userMessage]);\n//         setInput(\"\");\n\n//         try {\n//             // Send the message to the backend\n//             const response = await axios.post(\n//                 'http://localhost:8000/api/message/',\n//                 { text: input },\n//                 {\n//                     headers: {\n//                         Authorization: `Bearer ${localStorage.getItem('access')}`,\n//                     },\n//                 }\n//             );\n//             console.log(\"msg res: \", response.data);\n\n//             const botMessage = { text: response.data.response, sender: 'bot' };\n//             setMessages((prevMessages) => [...prevMessages, botMessage]);\n//         } catch (error) {\n//             console.log(\"auth: \", localStorage.getItem('access'));\n//             console.error('Error sending message:', error);\n//             const errorMessage = { text: 'Error: Unable to fetch response.', sender: 'bot' };\n//             setMessages((prevMessages) => [...prevMessages, errorMessage]);\n//         } finally {\n//             setInput(''); // Clear the input field\n//         }\n//     };\n\n//     const handleKeyDown = (e) => {\n//         if (e.key === \"Enter\") {\n//             e.preventDefault();\n//             sendMessage();\n//         }\n//     };\n\n//     useEffect(() => {\n//         if (chatAreaRef.current) {\n//             chatAreaRef.current.scrollTop = chatAreaRef.current.scrollHeight;\n//         }\n//     }, [messages]);\n\n//     return (\n//         <div className=\"flex items-center justify-center h-screen bg-gradient-to-br from-purple-100 to-blue-50\">\n//             {/* Chatbot Container */}\n//             <div className=\"flex flex-col w-full max-w-3xl h-full bg-white shadow-2xl rounded-lg overflow-hidden\">\n//                 {/* Header */}\n//                 <div className=\"flex items-center justify-between p-4 bg-gradient-to-r from-blue-500 to-indigo-500 text-white shadow-md\">\n//                     <button className=\"hover:text-red-400 transition duration-200\">\n//                         <AiOutlineClose size={24} />\n//                     </button>\n//                     <h2 className=\"text-xl font-bold\">بات دلبستگی به خود</h2>\n//                     <div className=\"rounded-full bg-indigo-800 p-2 shadow-md\">\n//                         <span role=\"img\" aria-label=\"bot\" className=\"text-2xl\">\n//                             <TbMessageChatbotFilled />\n//                         </span>\n//                     </div>\n//                 </div>\n\n//                 <div ref={chatAreaRef} className=\"flex-grow overflow-y-auto p-4 space-y-4 bg-gray-50\">\n//                     {messages.map((msg, index) => (\n//                         <div\n//                             key={index}\n//                             className={`flex ${msg.sender === \"user\" ? \"justify-end\" : \"justify-start\"\n//                                 }`}\n//                         >\n//                             <div\n//                                 dir=\"rtl\"\n//                                 className={`max-w-xs px-4 py-2 ${msg.sender === \"user\"\n//                                     ? \"bg-blue-500 text-white rounded-l-2xl rounded-tr-2xl\"\n//                                     : \"bg-gray-200 text-blue-700 rounded-r-2xl rounded-tl-2xl\"\n//                                     }`}\n//                             >\n//                                 {msg.text}\n//                             </div>\n\n//                         </div>\n//                     ))}\n//                 </div>\n\n//                 {/* Action Buttons */}\n//                 <div dir=\"rtl\" className=\"flex items-center text-sm justify-center px-4 py-3 bg-gradient-to-r from-grey-900 to-indigo-500 text-white\">\n//                     <button className=\"bg-white text-blue-500 mx-2 px-4 py-2 rounded-full shadow-md hover:bg-gray-100 transition duration-200\">\n//                         سلام!\n//                     </button>\n//                     <button className=\"bg-white text-blue-500 mx-2 px-4 py-2 rounded-full shadow-md hover:bg-gray-100 transition duration-200\">\n//                         حالم خوبه.\n//                     </button>\n//                     <button className=\"bg-white text-blue-500 mx-2 px-4 py-2 rounded-full shadow-md hover:bg-gray-100 transition duration-200\">\n//                         نیاز به کمک دارم.\n//                     </button>\n//                 </div>\n\n//                 {/* Input Area */}\n//                 <div className=\"flex items-center px-4 py-3 bg-white shadow-lg\">\n//                     <input\n//                         type=\"text\"\n//                         value={input}\n//                         onChange={(e) => setInput(e.target.value)}\n//                         onKeyDown={handleKeyDown}\n//                         className=\"flex-grow px-4 py-2 border border-gray-300 rounded-full text-blue-700 placeholder-blue-400 focus:outline-none focus:ring-2 focus:ring-blue-500 transition duration-200\"\n//                         dir=\"rtl\"\n//                         placeholder=\"پیام خود را وارد کنید...\"\n//                     />\n//                     <button\n//                         onClick={sendMessage}\n//                         className=\"ml-2 bg-blue-500 text-white p-3 rounded-full shadow-md hover:bg-blue-600 transition duration-200\"\n//                     >\n//                         <FiSend size={20} />\n//                     </button>\n//                 </div>\n//             </div>\n//         </div>\n//     );\n// };\n\n// export default Chatbot;\n\nimport React, { useState, useRef, useEffect } from \"react\";\nimport { FiSend } from \"react-icons/fi\";\nimport { AiOutlineClose } from \"react-icons/ai\";\nimport { TbMessageChatbotFilled } from \"react-icons/tb\";\nimport axios from \"axios\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Chatbot = () => {\n  _s();\n  const [messages, setMessages] = useState([{\n    text: \"سلام! چطور میتونم کمکتون کنم؟\",\n    sender: \"bot\"\n  }]);\n  const [input, setInput] = useState(\"\");\n  const [isTyping, setIsTyping] = useState(false);\n  const [recommendations, setRecommendations] = useState([]);\n  const chatAreaRef = useRef(null);\n  const sendMessage = async (text = input) => {\n    if (!text.trim()) return;\n\n    // Add the user's message to the chat\n    const userMessage = {\n      text,\n      sender: \"user\"\n    };\n    setMessages(prevMessages => [...prevMessages, userMessage]);\n    setInput(\"\");\n    setRecommendations([]);\n    setIsTyping(true); // Show typing animation\n\n    try {\n      // Send the message to the backend\n      const response = await axios.post(\"http://localhost:8000/api/message/\", {\n        text\n      }, {\n        headers: {\n          Authorization: `Bearer ${localStorage.getItem(\"access\")}`\n        }\n      });\n      console.log(\"msg res: \", response.data);\n\n      // Add bot's message and recommendations to the chat\n      const botMessage = {\n        text: response.data.response,\n        sender: \"bot\"\n      };\n      setMessages(prevMessages => [...prevMessages, botMessage]);\n      setRecommendations(response.data.recommendations || []);\n    } catch (error) {\n      console.log(\"auth: \", localStorage.getItem(\"access\"));\n      console.error(\"Error sending message:\", error);\n      const errorMessage = {\n        text: \"Error: Unable to fetch response.\",\n        sender: \"bot\"\n      };\n      setMessages(prevMessages => [...prevMessages, errorMessage]);\n    } finally {\n      setIsTyping(false); // Hide typing animation\n    }\n  };\n  const handleKeyDown = e => {\n    if (e.key === \"Enter\") {\n      e.preventDefault();\n      sendMessage();\n    }\n  };\n  useEffect(() => {\n    if (chatAreaRef.current) {\n      chatAreaRef.current.scrollTop = chatAreaRef.current.scrollHeight;\n    }\n  }, [messages]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"flex items-center justify-center h-screen bg-gradient-to-br from-purple-100 to-blue-50\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"flex flex-col w-full max-w-3xl h-full bg-white shadow-2xl rounded-lg overflow-hidden\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"flex items-center justify-between p-4 bg-gradient-to-r from-blue-500 to-indigo-500 text-white shadow-md\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"hover:text-red-400 transition duration-200\",\n          children: /*#__PURE__*/_jsxDEV(AiOutlineClose, {\n            size: 24\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 247,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 246,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n          className: \"text-xl font-bold\",\n          children: \"\\u0628\\u0627\\u062A \\u062F\\u0644\\u0628\\u0633\\u062A\\u06AF\\u06CC \\u0628\\u0647 \\u062E\\u0648\\u062F\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 249,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"rounded-full bg-indigo-800 p-2 shadow-md\",\n          children: /*#__PURE__*/_jsxDEV(\"span\", {\n            role: \"img\",\n            \"aria-label\": \"bot\",\n            className: \"text-2xl\",\n            children: /*#__PURE__*/_jsxDEV(TbMessageChatbotFilled, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 252,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 251,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 250,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 245,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        ref: chatAreaRef,\n        className: \"flex-grow overflow-y-auto p-4 space-y-4 bg-gray-50\",\n        children: [messages.map((msg, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `flex ${msg.sender === \"user\" ? \"justify-end\" : \"justify-start\"}`,\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            dir: \"rtl\",\n            className: `max-w-xs px-4 py-2 ${msg.sender === \"user\" ? \"bg-blue-500 text-white rounded-l-2xl rounded-tr-2xl\" : \"bg-gray-200 text-blue-700 rounded-r-2xl rounded-tl-2xl\"}`,\n            children: msg.text\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 263,\n            columnNumber: 29\n          }, this)\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 259,\n          columnNumber: 25\n        }, this)), isTyping && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"flex justify-start\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"bg-gray-200 text-blue-700 px-4 py-2 rounded-r-2xl rounded-tl-2xl animate-pulse\",\n            dir: \"rtl\",\n            children: \"\\u062F\\u0631 \\u062D\\u0627\\u0644 \\u062A\\u0627\\u06CC\\u067E...\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 278,\n            columnNumber: 29\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 277,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 257,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        dir: \"rtl\",\n        className: \"flex items-center text-sm justify-center px-4 py-3 bg-gradient-to-r from-grey-900 to-indigo-500 text-white\",\n        children: recommendations.length > 0 ? recommendations.map((recommendation, index) => /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"bg-white text-blue-500 mx-2 px-4 py-2 rounded-full shadow-md hover:bg-gray-100 transition duration-200\",\n          onClick: () => sendMessage(recommendation),\n          children: recommendation\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 295,\n          columnNumber: 29\n        }, this)) : /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"text-white\",\n          children: \"\\u067E\\u06CC\\u0634\\u0646\\u0647\\u0627\\u062F\\u06CC \\u0648\\u062C\\u0648\\u062F \\u0646\\u062F\\u0627\\u0631\\u062F.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 304,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 289,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"flex items-center px-4 py-3 bg-white shadow-lg\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          value: input,\n          onChange: e => setInput(e.target.value),\n          onKeyDown: handleKeyDown,\n          className: \"flex-grow px-4 py-2 border border-gray-300 rounded-full text-blue-700 placeholder-blue-400 focus:outline-none focus:ring-2 focus:ring-blue-500 transition duration-200\",\n          dir: \"rtl\",\n          placeholder: \"\\u067E\\u06CC\\u0627\\u0645 \\u062E\\u0648\\u062F \\u0631\\u0627 \\u0648\\u0627\\u0631\\u062F \\u06A9\\u0646\\u06CC\\u062F...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 310,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => sendMessage(),\n          className: \"ml-2 bg-blue-500 text-white p-3 rounded-full shadow-md hover:bg-blue-600 transition duration-200\",\n          children: /*#__PURE__*/_jsxDEV(FiSend, {\n            size: 20\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 323,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 319,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 309,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 243,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 241,\n    columnNumber: 9\n  }, this);\n};\n_s(Chatbot, \"EJnw9rxbyL6t9m06hnJnsMv6Rwg=\");\n_c = Chatbot;\nexport default Chatbot;\nvar _c;\n$RefreshReg$(_c, \"Chatbot\");","map":{"version":3,"names":["React","useState","useRef","useEffect","FiSend","AiOutlineClose","TbMessageChatbotFilled","axios","jsxDEV","_jsxDEV","Chatbot","_s","messages","setMessages","text","sender","input","setInput","isTyping","setIsTyping","recommendations","setRecommendations","chatAreaRef","sendMessage","trim","userMessage","prevMessages","response","post","headers","Authorization","localStorage","getItem","console","log","data","botMessage","error","errorMessage","handleKeyDown","e","key","preventDefault","current","scrollTop","scrollHeight","className","children","size","fileName","_jsxFileName","lineNumber","columnNumber","role","ref","map","msg","index","dir","length","recommendation","onClick","type","value","onChange","target","onKeyDown","placeholder","_c","$RefreshReg$"],"sources":["/Users/sara/Desktop/SAT Chatbot/LLM-Empowered-SAT-Bot-Frontend/src/Chatbot.js"],"sourcesContent":["// import React, { useState, useRef, useEffect } from \"react\";\n// import { FiSend } from \"react-icons/fi\";\n// import { AiOutlineClose } from \"react-icons/ai\";\n// import { TbMessageChatbotFilled } from \"react-icons/tb\";\n// import axios from 'axios';\n\n\n// const Chatbot = () => {\n//     const [messages, setMessages] = useState([\n//         { text: \"سلام! چطور میتونم کمکتون کنم؟\", sender: \"bot\" }\n//     ]);\n//     const [input, setInput] = useState(\"\");\n//     const [isTyping, setIsTyping] = useState(false);\n\n//     const chatAreaRef = useRef(null);\n\n//     // const sendMessage = () => {\n//     //     if (input.trim() !== \"\") {\n//     //         setMessages([...messages, { text: input, sender: \"user\" }]);\n//     //         setInput(\"\");\n\n//     //         // Show placeholder dots for the bot's response\n//     //         setMessages((prevMessages) => [\n//     //             ...prevMessages,\n//     //             { text: \"...\", sender: \"bot-placeholder\" },\n//     //         ]);\n\n//     //         setIsTyping(true);\n\n//     //         // Simulate bot's response after 2 seconds\n//     //         setTimeout(() => {\n//     //             setIsTyping(false);\n//     //             setMessages((prevMessages) =>\n//     //                 prevMessages.map((message, index) =>\n//     //                     index === prevMessages.length - 1 && message.sender === \"bot-placeholder\"\n//     //                         ? { text: \"ممنونم از پیامتون!\", sender: \"bot\" }\n//     //                         : message\n//     //                 )\n//     //             );\n//     //         }, 2000);\n\n//     //         setTimeout(() => {\n//     //             if (chatAreaRef.current) {\n//     //                 chatAreaRef.current.scrollTop = chatAreaRef.current.scrollHeight;\n//     //             }\n//     //         }, 100);\n//     //     }\n//     // };\n\n//     const sendMessage = async () => {\n//         if (!input.trim()) return;\n\n//         // Add the user's message to the chat\n//         const userMessage = { text: input, sender: 'user' };\n//         setMessages((prevMessages) => [...prevMessages, userMessage]);\n//         setInput(\"\");\n\n//         try {\n//             // Send the message to the backend\n//             const response = await axios.post(\n//                 'http://localhost:8000/api/message/',\n//                 { text: input },\n//                 {\n//                     headers: {\n//                         Authorization: `Bearer ${localStorage.getItem('access')}`,\n//                     },\n//                 }\n//             );\n//             console.log(\"msg res: \", response.data);\n\n//             const botMessage = { text: response.data.response, sender: 'bot' };\n//             setMessages((prevMessages) => [...prevMessages, botMessage]);\n//         } catch (error) {\n//             console.log(\"auth: \", localStorage.getItem('access'));\n//             console.error('Error sending message:', error);\n//             const errorMessage = { text: 'Error: Unable to fetch response.', sender: 'bot' };\n//             setMessages((prevMessages) => [...prevMessages, errorMessage]);\n//         } finally {\n//             setInput(''); // Clear the input field\n//         }\n//     };\n\n\n//     const handleKeyDown = (e) => {\n//         if (e.key === \"Enter\") {\n//             e.preventDefault();\n//             sendMessage();\n//         }\n//     };\n\n//     useEffect(() => {\n//         if (chatAreaRef.current) {\n//             chatAreaRef.current.scrollTop = chatAreaRef.current.scrollHeight;\n//         }\n//     }, [messages]);\n\n//     return (\n//         <div className=\"flex items-center justify-center h-screen bg-gradient-to-br from-purple-100 to-blue-50\">\n//             {/* Chatbot Container */}\n//             <div className=\"flex flex-col w-full max-w-3xl h-full bg-white shadow-2xl rounded-lg overflow-hidden\">\n//                 {/* Header */}\n//                 <div className=\"flex items-center justify-between p-4 bg-gradient-to-r from-blue-500 to-indigo-500 text-white shadow-md\">\n//                     <button className=\"hover:text-red-400 transition duration-200\">\n//                         <AiOutlineClose size={24} />\n//                     </button>\n//                     <h2 className=\"text-xl font-bold\">بات دلبستگی به خود</h2>\n//                     <div className=\"rounded-full bg-indigo-800 p-2 shadow-md\">\n//                         <span role=\"img\" aria-label=\"bot\" className=\"text-2xl\">\n//                             <TbMessageChatbotFilled />\n//                         </span>\n//                     </div>\n//                 </div>\n\n//                 <div ref={chatAreaRef} className=\"flex-grow overflow-y-auto p-4 space-y-4 bg-gray-50\">\n//                     {messages.map((msg, index) => (\n//                         <div\n//                             key={index}\n//                             className={`flex ${msg.sender === \"user\" ? \"justify-end\" : \"justify-start\"\n//                                 }`}\n//                         >\n//                             <div\n//                                 dir=\"rtl\"\n//                                 className={`max-w-xs px-4 py-2 ${msg.sender === \"user\"\n//                                     ? \"bg-blue-500 text-white rounded-l-2xl rounded-tr-2xl\"\n//                                     : \"bg-gray-200 text-blue-700 rounded-r-2xl rounded-tl-2xl\"\n//                                     }`}\n//                             >\n//                                 {msg.text}\n//                             </div>\n\n//                         </div>\n//                     ))}\n//                 </div>\n\n//                 {/* Action Buttons */}\n//                 <div dir=\"rtl\" className=\"flex items-center text-sm justify-center px-4 py-3 bg-gradient-to-r from-grey-900 to-indigo-500 text-white\">\n//                     <button className=\"bg-white text-blue-500 mx-2 px-4 py-2 rounded-full shadow-md hover:bg-gray-100 transition duration-200\">\n//                         سلام!\n//                     </button>\n//                     <button className=\"bg-white text-blue-500 mx-2 px-4 py-2 rounded-full shadow-md hover:bg-gray-100 transition duration-200\">\n//                         حالم خوبه.\n//                     </button>\n//                     <button className=\"bg-white text-blue-500 mx-2 px-4 py-2 rounded-full shadow-md hover:bg-gray-100 transition duration-200\">\n//                         نیاز به کمک دارم.\n//                     </button>\n//                 </div>\n\n//                 {/* Input Area */}\n//                 <div className=\"flex items-center px-4 py-3 bg-white shadow-lg\">\n//                     <input\n//                         type=\"text\"\n//                         value={input}\n//                         onChange={(e) => setInput(e.target.value)}\n//                         onKeyDown={handleKeyDown}\n//                         className=\"flex-grow px-4 py-2 border border-gray-300 rounded-full text-blue-700 placeholder-blue-400 focus:outline-none focus:ring-2 focus:ring-blue-500 transition duration-200\"\n//                         dir=\"rtl\"\n//                         placeholder=\"پیام خود را وارد کنید...\"\n//                     />\n//                     <button\n//                         onClick={sendMessage}\n//                         className=\"ml-2 bg-blue-500 text-white p-3 rounded-full shadow-md hover:bg-blue-600 transition duration-200\"\n//                     >\n//                         <FiSend size={20} />\n//                     </button>\n//                 </div>\n//             </div>\n//         </div>\n//     );\n// };\n\n// export default Chatbot;\n\nimport React, { useState, useRef, useEffect } from \"react\";\nimport { FiSend } from \"react-icons/fi\";\nimport { AiOutlineClose } from \"react-icons/ai\";\nimport { TbMessageChatbotFilled } from \"react-icons/tb\";\nimport axios from \"axios\";\n\nconst Chatbot = () => {\n    const [messages, setMessages] = useState([\n        { text: \"سلام! چطور میتونم کمکتون کنم؟\", sender: \"bot\" }\n    ]);\n    const [input, setInput] = useState(\"\");\n    const [isTyping, setIsTyping] = useState(false);\n    const [recommendations, setRecommendations] = useState([]);\n\n    const chatAreaRef = useRef(null);\n\n    const sendMessage = async (text = input) => {\n        if (!text.trim()) return;\n\n        // Add the user's message to the chat\n        const userMessage = { text, sender: \"user\" };\n        setMessages((prevMessages) => [...prevMessages, userMessage]);\n        setInput(\"\");\n        setRecommendations([]);\n        setIsTyping(true); // Show typing animation\n\n        try {\n            // Send the message to the backend\n            const response = await axios.post(\n                \"http://localhost:8000/api/message/\",\n                { text },\n                {\n                    headers: {\n                        Authorization: `Bearer ${localStorage.getItem(\"access\")}`\n                    }\n                }\n            );\n\n            console.log(\"msg res: \", response.data);\n\n            // Add bot's message and recommendations to the chat\n            const botMessage = { text: response.data.response, sender: \"bot\" };\n            setMessages((prevMessages) => [...prevMessages, botMessage]);\n            setRecommendations(response.data.recommendations || []);\n        } catch (error) {\n            console.log(\"auth: \", localStorage.getItem(\"access\"));\n            console.error(\"Error sending message:\", error);\n            const errorMessage = { text: \"Error: Unable to fetch response.\", sender: \"bot\" };\n            setMessages((prevMessages) => [...prevMessages, errorMessage]);\n        } finally {\n            setIsTyping(false); // Hide typing animation\n        }\n    };\n\n    const handleKeyDown = (e) => {\n        if (e.key === \"Enter\") {\n            e.preventDefault();\n            sendMessage();\n        }\n    };\n\n    useEffect(() => {\n        if (chatAreaRef.current) {\n            chatAreaRef.current.scrollTop = chatAreaRef.current.scrollHeight;\n        }\n    }, [messages]);\n\n    return (\n        <div className=\"flex items-center justify-center h-screen bg-gradient-to-br from-purple-100 to-blue-50\">\n            {/* Chatbot Container */}\n            <div className=\"flex flex-col w-full max-w-3xl h-full bg-white shadow-2xl rounded-lg overflow-hidden\">\n                {/* Header */}\n                <div className=\"flex items-center justify-between p-4 bg-gradient-to-r from-blue-500 to-indigo-500 text-white shadow-md\">\n                    <button className=\"hover:text-red-400 transition duration-200\">\n                        <AiOutlineClose size={24} />\n                    </button>\n                    <h2 className=\"text-xl font-bold\">بات دلبستگی به خود</h2>\n                    <div className=\"rounded-full bg-indigo-800 p-2 shadow-md\">\n                        <span role=\"img\" aria-label=\"bot\" className=\"text-2xl\">\n                            <TbMessageChatbotFilled />\n                        </span>\n                    </div>\n                </div>\n\n                <div ref={chatAreaRef} className=\"flex-grow overflow-y-auto p-4 space-y-4 bg-gray-50\">\n                    {messages.map((msg, index) => (\n                        <div\n                            key={index}\n                            className={`flex ${msg.sender === \"user\" ? \"justify-end\" : \"justify-start\"}`}\n                        >\n                            <div\n                                dir=\"rtl\"\n                                className={`max-w-xs px-4 py-2 ${msg.sender === \"user\"\n                                    ? \"bg-blue-500 text-white rounded-l-2xl rounded-tr-2xl\"\n                                    : \"bg-gray-200 text-blue-700 rounded-r-2xl rounded-tl-2xl\"\n                                    }`}\n                            >\n                                {msg.text}\n                            </div>\n                        </div>\n                    ))}\n\n                    {/* Typing Indicator */}\n                    {isTyping && (\n                        <div className=\"flex justify-start\">\n                            <div\n                                className=\"bg-gray-200 text-blue-700 px-4 py-2 rounded-r-2xl rounded-tl-2xl animate-pulse\"\n                                dir=\"rtl\"\n                            >\n                                در حال تایپ...\n                            </div>\n                        </div>\n                    )}\n                </div>\n\n                {/* Action Buttons */}\n                <div\n                    dir=\"rtl\"\n                    className=\"flex items-center text-sm justify-center px-4 py-3 bg-gradient-to-r from-grey-900 to-indigo-500 text-white\"\n                >\n                    {recommendations.length > 0 ? (\n                        recommendations.map((recommendation, index) => (\n                            <button\n                                key={index}\n                                className=\"bg-white text-blue-500 mx-2 px-4 py-2 rounded-full shadow-md hover:bg-gray-100 transition duration-200\"\n                                onClick={() => sendMessage(recommendation)}\n                            >\n                                {recommendation}\n                            </button>\n                        ))\n                    ) : (\n                        <p className=\"text-white\">پیشنهادی وجود ندارد.</p>\n                    )}\n                </div>\n\n                {/* Input Area */}\n                <div className=\"flex items-center px-4 py-3 bg-white shadow-lg\">\n                    <input\n                        type=\"text\"\n                        value={input}\n                        onChange={(e) => setInput(e.target.value)}\n                        onKeyDown={handleKeyDown}\n                        className=\"flex-grow px-4 py-2 border border-gray-300 rounded-full text-blue-700 placeholder-blue-400 focus:outline-none focus:ring-2 focus:ring-blue-500 transition duration-200\"\n                        dir=\"rtl\"\n                        placeholder=\"پیام خود را وارد کنید...\"\n                    />\n                    <button\n                        onClick={() => sendMessage()}\n                        className=\"ml-2 bg-blue-500 text-white p-3 rounded-full shadow-md hover:bg-blue-600 transition duration-200\"\n                    >\n                        <FiSend size={20} />\n                    </button>\n                </div>\n            </div>\n        </div>\n    );\n};\n\nexport default Chatbot;\n"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,MAAM,EAAEC,SAAS,QAAQ,OAAO;AAC1D,SAASC,MAAM,QAAQ,gBAAgB;AACvC,SAASC,cAAc,QAAQ,gBAAgB;AAC/C,SAASC,sBAAsB,QAAQ,gBAAgB;AACvD,OAAOC,KAAK,MAAM,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE1B,MAAMC,OAAO,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAClB,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGZ,QAAQ,CAAC,CACrC;IAAEa,IAAI,EAAE,+BAA+B;IAAEC,MAAM,EAAE;EAAM,CAAC,CAC3D,CAAC;EACF,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGhB,QAAQ,CAAC,EAAE,CAA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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}